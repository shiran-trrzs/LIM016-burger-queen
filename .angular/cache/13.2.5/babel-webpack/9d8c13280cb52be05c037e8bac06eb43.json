{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\USUARIO\\\\Documents\\\\Laboratoria\\\\LIM016-burger-queen-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { FormComponent } from './form.component';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { of } from 'rxjs';\nimport { By } from '@angular/platform-browser';\nimport { HttpErrorResponse } from '@angular/common/http';\ndescribe('FormComponent', () => {\n  let httpClient;\n  let httpTestingController;\n  let component;\n  let fixture;\n  let service; // let httpClientSpy: jasmine.SpyObj<HttpClient>;\n  // // let httpClientSpy: { post: jasmine.Spy }\n\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    // let routerSpy = jasmine.createSpyObj<Router>('Router', ['navigate']);\n    // // httpClientSpy = jasmine.SpyObj<HttpClient>;\n    // httpClientSpy = jasmine.createSpyObj('HttpClient', ['post']);\n    // service = new AuthService(routerSpy as any, httpClientSpy as any)\n    TestBed.configureTestingModule({\n      declarations: [FormComponent],\n      imports: [RouterTestingModule, HttpClientTestingModule, FormsModule, ReactiveFormsModule]\n    }).compileComponents();\n    fixture = TestBed.createComponent(FormComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  })); // beforeEach(() => {\n  //   fixture = TestBed.createComponent(FormComponent);\n  //   component = fixture.componentInstance;\n  //   fixture.detectChanges();\n  // });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('Should return invalid form', () => {\n    const email = component.validateForm.controls['email'];\n    email.setValue('waitress@burgerland.com');\n    expect(component.validateForm.invalid).toBeTrue();\n  });\n  it('Should return valid form', () => {\n    const email = component.validateForm.controls['email'];\n    const password = component.validateForm.controls['password'];\n    email.setValue('hannah@burgerland.com');\n    password.setValue('12345');\n    expect(component.validateForm.invalid).toBeFalse();\n  });\n  it('Should update user data', () => {\n    const email = component.validateForm.controls['email'];\n    const password = component.validateForm.controls['password'];\n    email.setValue('waiter@burgerland.com');\n    password.setValue('changeme');\n    const btnElement = fixture.debugElement.query(By.css('button.btn'));\n    btnElement.nativeElement.click();\n    const testData = {\n      email: 'waiter@burgerland.com',\n      password: 'changeme'\n    };\n    expect(component.loginData).toEqual(testData);\n  });\n  it('should return an error when the server returns a 404', done => {\n    const data = {\n      email: \"\",\n      password: \"\"\n    };\n    const errorResponse = new HttpErrorResponse({\n      error: 'test 404 error',\n      status: 404,\n      statusText: 'Not Found'\n    });\n    httpClientSpy.post.and.returnValue(of(errorResponse));\n    service.loginForm(data).subscribe({\n      next: response => done.fail('expected an error, not this'),\n      error: err => {\n        expect(err.error.message).toContain(\"No ingresaste correo o contraseÃ±a\");\n        done();\n      }\n    });\n  }, 30000);\n});","map":{"version":3,"sources":["C:/Users/USUARIO/Documents/Laboratoria/LIM016-burger-queen-1/src/app/modules/login/form/form.component.spec.ts"],"names":["TestBed","FormComponent","RouterTestingModule","HttpClientTestingModule","FormsModule","ReactiveFormsModule","of","By","HttpErrorResponse","describe","httpClient","httpTestingController","component","fixture","service","beforeEach","configureTestingModule","declarations","imports","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","email","validateForm","controls","setValue","invalid","toBeTrue","password","toBeFalse","btnElement","debugElement","query","css","nativeElement","click","testData","loginData","toEqual","done","data","errorResponse","error","status","statusText","httpClientSpy","post","and","returnValue","loginForm","subscribe","next","response","fail","err","message","toContain"],"mappings":";AAAA,SAASA,OAAT,QAAwB,uBAAxB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,mBAAT,QAAoC,yBAApC;AACA,SAASC,uBAAT,QAAwC,8BAAxC;AACA,SAASC,WAAT,EAAsBC,mBAAtB,QAAiD,gBAAjD;AACA,SAASC,EAAT,QAAmB,MAAnB;AACA,SAASC,EAAT,QAAmB,2BAAnB;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACAC,QAAQ,CAAC,eAAD,EAAkB,MAAM;AAC5B,MAAIC,UAAJ;AACA,MAAIC,qBAAJ;AACA,MAAIC,SAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,OAAJ,CAL4B,CAM5B;AACA;;AACAC,EAAAA,UAAU,iCAAC,aAAY;AACnB;AACA;AACA;AACA;AACAf,IAAAA,OAAO,CAACgB,sBAAR,CAA+B;AAC3BC,MAAAA,YAAY,EAAE,CACVhB,aADU,CADa;AAI3BiB,MAAAA,OAAO,EAAE,CACLhB,mBADK,EAELC,uBAFK,EAGLC,WAHK,EAILC,mBAJK;AAJkB,KAA/B,EAWKc,iBAXL;AAYAN,IAAAA,OAAO,GAAGb,OAAO,CAACoB,eAAR,CAAwBnB,aAAxB,CAAV;AACAW,IAAAA,SAAS,GAAGC,OAAO,CAACQ,iBAApB;AACAR,IAAAA,OAAO,CAACS,aAAR;AACH,GApBS,EAAV,CAR4B,CA6B5B;AACA;AACA;AACA;AACA;;AACAC,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACtBC,IAAAA,MAAM,CAACZ,SAAD,CAAN,CAAkBa,UAAlB;AACH,GAFC,CAAF;AAGAF,EAAAA,EAAE,CAAC,4BAAD,EAA+B,MAAM;AACnC,UAAMG,KAAK,GAAGd,SAAS,CAACe,YAAV,CAAuBC,QAAvB,CAAgC,OAAhC,CAAd;AACAF,IAAAA,KAAK,CAACG,QAAN,CAAe,yBAAf;AACAL,IAAAA,MAAM,CAACZ,SAAS,CAACe,YAAV,CAAuBG,OAAxB,CAAN,CAAuCC,QAAvC;AACH,GAJC,CAAF;AAKAR,EAAAA,EAAE,CAAC,0BAAD,EAA6B,MAAM;AACjC,UAAMG,KAAK,GAAGd,SAAS,CAACe,YAAV,CAAuBC,QAAvB,CAAgC,OAAhC,CAAd;AACA,UAAMI,QAAQ,GAAGpB,SAAS,CAACe,YAAV,CAAuBC,QAAvB,CAAgC,UAAhC,CAAjB;AACAF,IAAAA,KAAK,CAACG,QAAN,CAAe,uBAAf;AACAG,IAAAA,QAAQ,CAACH,QAAT,CAAkB,OAAlB;AACAL,IAAAA,MAAM,CAACZ,SAAS,CAACe,YAAV,CAAuBG,OAAxB,CAAN,CAAuCG,SAAvC;AACH,GANC,CAAF;AAOAV,EAAAA,EAAE,CAAC,yBAAD,EAA4B,MAAM;AAChC,UAAMG,KAAK,GAAGd,SAAS,CAACe,YAAV,CAAuBC,QAAvB,CAAgC,OAAhC,CAAd;AACA,UAAMI,QAAQ,GAAGpB,SAAS,CAACe,YAAV,CAAuBC,QAAvB,CAAgC,UAAhC,CAAjB;AACAF,IAAAA,KAAK,CAACG,QAAN,CAAe,uBAAf;AACAG,IAAAA,QAAQ,CAACH,QAAT,CAAkB,UAAlB;AACA,UAAMK,UAAU,GAAGrB,OAAO,CAACsB,YAAR,CAAqBC,KAArB,CAA2B7B,EAAE,CAAC8B,GAAH,CAAO,YAAP,CAA3B,CAAnB;AACAH,IAAAA,UAAU,CAACI,aAAX,CAAyBC,KAAzB;AACA,UAAMC,QAAQ,GAAG;AACbd,MAAAA,KAAK,EAAE,uBADM;AAEbM,MAAAA,QAAQ,EAAE;AAFG,KAAjB;AAIAR,IAAAA,MAAM,CAACZ,SAAS,CAAC6B,SAAX,CAAN,CAA4BC,OAA5B,CAAoCF,QAApC;AACH,GAZC,CAAF;AAaAjB,EAAAA,EAAE,CAAC,sDAAD,EAA0DoB,IAAD,IAAU;AACjE,UAAMC,IAAI,GAAG;AACTlB,MAAAA,KAAK,EAAE,EADE;AAETM,MAAAA,QAAQ,EAAE;AAFD,KAAb;AAIA,UAAMa,aAAa,GAAG,IAAIrC,iBAAJ,CAAsB;AACxCsC,MAAAA,KAAK,EAAE,gBADiC;AAExCC,MAAAA,MAAM,EAAE,GAFgC;AAE3BC,MAAAA,UAAU,EAAE;AAFe,KAAtB,CAAtB;AAIAC,IAAAA,aAAa,CAACC,IAAd,CAAmBC,GAAnB,CAAuBC,WAAvB,CAAmC9C,EAAE,CAACuC,aAAD,CAArC;AACA/B,IAAAA,OAAO,CAACuC,SAAR,CAAkBT,IAAlB,EAAwBU,SAAxB,CAAkC;AAC9BC,MAAAA,IAAI,EAAEC,QAAQ,IAAIb,IAAI,CAACc,IAAL,CAAU,6BAAV,CADY;AAE9BX,MAAAA,KAAK,EAAEY,GAAG,IAAI;AACVlC,QAAAA,MAAM,CAACkC,GAAG,CAACZ,KAAJ,CAAUa,OAAX,CAAN,CAA0BC,SAA1B,CAAoC,mCAApC;AACAjB,QAAAA,IAAI;AACP;AAL6B,KAAlC;AAOH,GAjBC,EAiBC,KAjBD,CAAF;AAkBH,CAhFO,CAAR","sourcesContent":["import { TestBed } from '@angular/core/testing';\r\nimport { FormComponent } from './form.component';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { of } from 'rxjs';\r\nimport { By } from '@angular/platform-browser';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\ndescribe('FormComponent', () => {\r\n    let httpClient;\r\n    let httpTestingController;\r\n    let component;\r\n    let fixture;\r\n    let service;\r\n    // let httpClientSpy: jasmine.SpyObj<HttpClient>;\r\n    // // let httpClientSpy: { post: jasmine.Spy }\r\n    beforeEach(async () => {\r\n        // let routerSpy = jasmine.createSpyObj<Router>('Router', ['navigate']);\r\n        // // httpClientSpy = jasmine.SpyObj<HttpClient>;\r\n        // httpClientSpy = jasmine.createSpyObj('HttpClient', ['post']);\r\n        // service = new AuthService(routerSpy as any, httpClientSpy as any)\r\n        TestBed.configureTestingModule({\r\n            declarations: [\r\n                FormComponent\r\n            ],\r\n            imports: [\r\n                RouterTestingModule,\r\n                HttpClientTestingModule,\r\n                FormsModule,\r\n                ReactiveFormsModule\r\n            ]\r\n        })\r\n            .compileComponents();\r\n        fixture = TestBed.createComponent(FormComponent);\r\n        component = fixture.componentInstance;\r\n        fixture.detectChanges();\r\n    });\r\n    // beforeEach(() => {\r\n    //   fixture = TestBed.createComponent(FormComponent);\r\n    //   component = fixture.componentInstance;\r\n    //   fixture.detectChanges();\r\n    // });\r\n    it('should create', () => {\r\n        expect(component).toBeTruthy();\r\n    });\r\n    it('Should return invalid form', () => {\r\n        const email = component.validateForm.controls['email'];\r\n        email.setValue('waitress@burgerland.com');\r\n        expect(component.validateForm.invalid).toBeTrue();\r\n    });\r\n    it('Should return valid form', () => {\r\n        const email = component.validateForm.controls['email'];\r\n        const password = component.validateForm.controls['password'];\r\n        email.setValue('hannah@burgerland.com');\r\n        password.setValue('12345');\r\n        expect(component.validateForm.invalid).toBeFalse();\r\n    });\r\n    it('Should update user data', () => {\r\n        const email = component.validateForm.controls['email'];\r\n        const password = component.validateForm.controls['password'];\r\n        email.setValue('waiter@burgerland.com');\r\n        password.setValue('changeme');\r\n        const btnElement = fixture.debugElement.query(By.css('button.btn'));\r\n        btnElement.nativeElement.click();\r\n        const testData = {\r\n            email: 'waiter@burgerland.com',\r\n            password: 'changeme'\r\n        };\r\n        expect(component.loginData).toEqual(testData);\r\n    });\r\n    it('should return an error when the server returns a 404', (done) => {\r\n        const data = {\r\n            email: \"\",\r\n            password: \"\"\r\n        };\r\n        const errorResponse = new HttpErrorResponse({\r\n            error: 'test 404 error',\r\n            status: 404, statusText: 'Not Found'\r\n        });\r\n        httpClientSpy.post.and.returnValue(of(errorResponse));\r\n        service.loginForm(data).subscribe({\r\n            next: response => done.fail('expected an error, not this'),\r\n            error: err => {\r\n                expect(err.error.message).toContain(\"No ingresaste correo o contraseÃ±a\");\r\n                done();\r\n            }\r\n        });\r\n    }, 30000);\r\n});\r\n"]},"metadata":{},"sourceType":"module"}