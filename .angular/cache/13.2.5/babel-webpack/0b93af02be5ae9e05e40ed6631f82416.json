{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.basePath = 'https://bbqueen.herokuapp.com/';\n      this.user = {\n        email: '',\n        roles: {\n          admin: false,\n          name: ''\n        }\n      };\n      this.token = localStorage.getItem('token');\n\n      this.httpOptions = () => ({\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.token}`\n        })\n      });\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('An error occurred:', error.error.message);\n      } else {\n        console.error(`Backend returned code ${error.status}, ` + `body was: ${error.message}`);\n      }\n\n      return throwError('Something bad happened; please try again later.');\n    } // Get email and password from server to capture the token\n\n\n    loginForm(data) {\n      this.user.email = data.email;\n      return this.http.post(this.basePath + 'auth', data).pipe(retry(2) // catchError(this.handleError)\n      );\n    } //  After login save token and other values(if any) in localStorage\n\n\n    setUser(resp) {\n      localStorage.setItem('token', resp.token);\n      this.token = resp.token;\n      this.getUser().subscribe(res => {\n        localStorage.setItem('idUser', res._id);\n        localStorage.setItem('username', res.nameUser);\n\n        if (res.roles.name === 'chef') {\n          this.router.navigate(['/chef']);\n        } else if (res.roles.name === 'meserx') {\n          this.router.navigate(['/waiter']);\n        }\n\n        localStorage.setItem('rol', res.roles.name);\n      });\n    }\n\n    isLoggedIn() {\n      return localStorage.getItem('token') != null;\n    } // Captures the email address to identify which user is logging in\n\n\n    getUser() {\n      return this.http.get(this.basePath + `users/${this.user.email}`, this.httpOptions()).pipe(retry(2), catchError(this.handleError));\n    } // After clearing localStorage redirect to login screen\n\n\n    logout() {\n      localStorage.clear();\n    } // Get json with all products\n\n\n    getProducts() {\n      return this.http.get(this.basePath + 'products?limit=12', this.httpOptions()).pipe(retry(2), catchError(this.handleError));\n    }\n\n    newOrder(data) {\n      return this.http.post(this.basePath + 'orders', data, this.httpOptions());\n    } // Get json with all orders\n\n\n    getOrders() {\n      return this.http.get(this.basePath + 'orders?limit=100', this.httpOptions()).pipe(retry(2), catchError(this.handleError));\n    }\n\n    changeStatusOrder(idOrder, data) {\n      return this.http.put(this.basePath + `orders/${idOrder}`, data, this.httpOptions());\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}