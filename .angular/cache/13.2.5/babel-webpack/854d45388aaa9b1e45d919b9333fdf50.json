{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\USUARIO\\\\Documents\\\\Laboratoria\\\\LIM016-burger-queen-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { FormComponent } from './form.component';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { By } from '@angular/platform-browser';\nimport { HttpClient } from '@angular/common/http';\ndescribe('FormComponent', () => {\n  let httpClient;\n  let httpTestingController;\n  let component;\n  let fixture;\n  let service; // let httpClientSpy: jasmine.SpyObj<HttpClient>;\n  // // let httpClientSpy: { post: jasmine.Spy }\n\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    // let routerSpy = jasmine.createSpyObj<Router>('Router', ['navigate']);\n    // // httpClientSpy = jasmine.SpyObj<HttpClient>;\n    // httpClientSpy = jasmine.createSpyObj('HttpClient', ['post']);\n    // service = new AuthService(routerSpy as any, httpClientSpy as any)\n    yield TestBed.configureTestingModule({\n      declarations: [FormComponent],\n      imports: [RouterTestingModule, HttpClientTestingModule, FormsModule, ReactiveFormsModule]\n    }).compileComponents();\n    httpClient = TestBed.inject(HttpClient);\n    httpTestingController = TestBed.inject(HttpTestingController);\n    fixture = TestBed.createComponent(FormComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  })); // beforeEach(() => {\n  //   fixture = TestBed.createComponent(FormComponent);\n  //   component = fixture.componentInstance;\n  //   fixture.detectChanges();\n  // });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('Should return invalid form', () => {\n    const email = component.validateForm.controls['email'];\n    email.setValue('waitress@burgerland.com');\n    expect(component.validateForm.invalid).toBeTrue();\n  });\n  it('Should return valid form', () => {\n    const email = component.validateForm.controls['email'];\n    const password = component.validateForm.controls['password'];\n    email.setValue('hannah@burgerland.com');\n    password.setValue('12345');\n    expect(component.validateForm.invalid).toBeFalse();\n  });\n  it('Should update user data', () => {\n    const email = component.validateForm.controls['email'];\n    const password = component.validateForm.controls['password'];\n    email.setValue('waiter@burgerland.com');\n    password.setValue('changeme');\n    const btnElement = fixture.debugElement.query(By.css('button.btn'));\n    btnElement.nativeElement.click();\n    const testData = {\n      email: 'waiter@burgerland.com',\n      password: 'changeme'\n    };\n    expect(component.loginData).toEqual(testData);\n  });\n  it('should return an error when the server returns a 404', done => {\n    const data = {\n      email: \"\",\n      password: \"huhuhu\"\n    };\n    const basePath = 'https://bbqueen.herokuapp.com/';\n    const errorResponse = \"No ingresaste coeo o contraseÃ±a\";\n    httpClient.post(basePath + 'auth', data).subscribe({\n      // next: () => done.fail('should have failed with the 404 error'),\n      error: error => {\n        expect(error.error).withContext('message').toEqual(errorResponse);\n        done();\n      }\n    });\n    const req = httpTestingController.expectOne(basePath + 'auth'); // Respond with mock error\n\n    req.flush(errorResponse, {\n      status: 404,\n      statusText: 'Not Found'\n    });\n  }, 10000);\n});","map":{"version":3,"sources":["C:/Users/USUARIO/Documents/Laboratoria/LIM016-burger-queen-1/src/app/modules/login/form/form.component.spec.ts"],"names":["TestBed","FormComponent","RouterTestingModule","HttpClientTestingModule","HttpTestingController","FormsModule","ReactiveFormsModule","By","HttpClient","describe","httpClient","httpTestingController","component","fixture","service","beforeEach","configureTestingModule","declarations","imports","compileComponents","inject","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","email","validateForm","controls","setValue","invalid","toBeTrue","password","toBeFalse","btnElement","debugElement","query","css","nativeElement","click","testData","loginData","toEqual","done","data","basePath","errorResponse","post","subscribe","error","withContext","req","expectOne","flush","status","statusText"],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\r\nimport { FormComponent } from './form.component';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { By } from '@angular/platform-browser';\r\nimport { HttpClient } from '@angular/common/http';\r\ndescribe('FormComponent', () => {\r\n    let httpClient;\r\n    let httpTestingController;\r\n    let component;\r\n    let fixture;\r\n    let service;\r\n    // let httpClientSpy: jasmine.SpyObj<HttpClient>;\r\n    // // let httpClientSpy: { post: jasmine.Spy }\r\n    beforeEach(async () => {\r\n        // let routerSpy = jasmine.createSpyObj<Router>('Router', ['navigate']);\r\n        // // httpClientSpy = jasmine.SpyObj<HttpClient>;\r\n        // httpClientSpy = jasmine.createSpyObj('HttpClient', ['post']);\r\n        // service = new AuthService(routerSpy as any, httpClientSpy as any)\r\n        await TestBed.configureTestingModule({\r\n            declarations: [\r\n                FormComponent\r\n            ],\r\n            imports: [\r\n                RouterTestingModule,\r\n                HttpClientTestingModule,\r\n                FormsModule,\r\n                ReactiveFormsModule\r\n            ]\r\n        })\r\n            .compileComponents();\r\n        httpClient = TestBed.inject(HttpClient);\r\n        httpTestingController = TestBed.inject(HttpTestingController);\r\n        fixture = TestBed.createComponent(FormComponent);\r\n        component = fixture.componentInstance;\r\n        fixture.detectChanges();\r\n    });\r\n    // beforeEach(() => {\r\n    //   fixture = TestBed.createComponent(FormComponent);\r\n    //   component = fixture.componentInstance;\r\n    //   fixture.detectChanges();\r\n    // });\r\n    it('should create', () => {\r\n        expect(component).toBeTruthy();\r\n    });\r\n    it('Should return invalid form', () => {\r\n        const email = component.validateForm.controls['email'];\r\n        email.setValue('waitress@burgerland.com');\r\n        expect(component.validateForm.invalid).toBeTrue();\r\n    });\r\n    it('Should return valid form', () => {\r\n        const email = component.validateForm.controls['email'];\r\n        const password = component.validateForm.controls['password'];\r\n        email.setValue('hannah@burgerland.com');\r\n        password.setValue('12345');\r\n        expect(component.validateForm.invalid).toBeFalse();\r\n    });\r\n    it('Should update user data', () => {\r\n        const email = component.validateForm.controls['email'];\r\n        const password = component.validateForm.controls['password'];\r\n        email.setValue('waiter@burgerland.com');\r\n        password.setValue('changeme');\r\n        const btnElement = fixture.debugElement.query(By.css('button.btn'));\r\n        btnElement.nativeElement.click();\r\n        const testData = {\r\n            email: 'waiter@burgerland.com',\r\n            password: 'changeme'\r\n        };\r\n        expect(component.loginData).toEqual(testData);\r\n    });\r\n    it('should return an error when the server returns a 404', (done) => {\r\n        const data = {\r\n            email: \"\",\r\n            password: \"huhuhu\"\r\n        };\r\n        const basePath = 'https://bbqueen.herokuapp.com/';\r\n        const errorResponse = \"No ingresaste coeo o contraseÃ±a\";\r\n        httpClient.post(basePath + 'auth', data).subscribe({\r\n            // next: () => done.fail('should have failed with the 404 error'),\r\n            error: (error) => {\r\n                expect(error.error).withContext('message').toEqual(errorResponse);\r\n                done();\r\n            },\r\n        });\r\n        const req = httpTestingController.expectOne(basePath + 'auth');\r\n        // Respond with mock error\r\n        req.flush(errorResponse, { status: 404, statusText: 'Not Found' });\r\n    }, 10000);\r\n});\r\n"]},"metadata":{},"sourceType":"module"}