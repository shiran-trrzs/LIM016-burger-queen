{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\USUARIO\\\\Documents\\\\Laboratoria\\\\LIM016-burger-queen-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { FormComponent } from './form.component';\nimport { AuthService } from '../../../_services/auth.service';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { of } from 'rxjs';\nimport { By } from '@angular/platform-browser';\ndescribe('FormComponent', () => {\n  let component;\n  let fixture;\n  let service;\n  let httpClientSpy;\n  let httpClientSpyGet;\n  let httpClientSpyPut;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    // jasmine.DEFAULT_TIMEOUT_INTERVAL = 20000;\n    let routerSpy = jasmine.createSpyObj('Router', ['navigate']);\n    yield TestBed.configureTestingModule({\n      declarations: [FormComponent],\n      imports: [RouterTestingModule, HttpClientTestingModule, FormsModule, ReactiveFormsModule]\n    }).compileComponents();\n    httpClientSpy = jasmine.createSpyObj('HttpClient', ['post']);\n    httpClientSpyGet = jasmine.createSpyObj('HttpClient', ['get']);\n    httpClientSpyPut = jasmine.createSpyObj('HttpClient', ['put']);\n    service = new AuthService(routerSpy, httpClientSpy);\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(FormComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('Should return invalid form', () => {\n    const email = component.validateForm.controls['email'];\n    email.setValue('waitress@burgerland.com');\n    expect(component.validateForm.invalid).toBeTrue();\n  });\n  it('Should return valid form', () => {\n    const email = component.validateForm.controls['email'];\n    const password = component.validateForm.controls['password'];\n    email.setValue('hannah@burgerland.com');\n    password.setValue('12345');\n    expect(component.validateForm.invalid).toBeFalse();\n  });\n  it('Should update user data', () => {\n    const email = component.validateForm.controls['email'];\n    const password = component.validateForm.controls['password'];\n    email.setValue('waiter@burgerland.com');\n    password.setValue('changeme');\n    const btnElement = fixture.debugElement.query(By.css('button.btn'));\n    btnElement.nativeElement.click();\n    const testData = {\n      email: 'waiter@burgerland.com',\n      password: 'changeme'\n    };\n    expect(component.loginData).toEqual(testData);\n  });\n  it('should return an error when the server returns a 404', done => {\n    const data = {\n      email: \"kdmxskn\",\n      password: \"\"\n    };\n    const errorResponse = {\n      error: \"No ingresaste correo o contraseña\"\n    };\n    httpClientSpy.post.and.returnValue(of(errorResponse));\n    service.loginForm(data).subscribe({\n      error: response => {\n        expect(response).toContain(\"No ingresaste correo o contraseña\"), done();\n      } //   error: err  => {\n      //   expect(err.message).toContain(\"No ingresaste correo o contraseña\");\n      //   done();\n      // }\n\n    });\n  }, 60000);\n});","map":{"version":3,"sources":["C:/Users/USUARIO/Documents/Laboratoria/LIM016-burger-queen-1/src/app/modules/login/form/form.component.spec.ts"],"names":["TestBed","FormComponent","AuthService","RouterTestingModule","HttpClientTestingModule","FormsModule","ReactiveFormsModule","of","By","describe","component","fixture","service","httpClientSpy","httpClientSpyGet","httpClientSpyPut","beforeEach","routerSpy","jasmine","createSpyObj","configureTestingModule","declarations","imports","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","email","validateForm","controls","setValue","invalid","toBeTrue","password","toBeFalse","btnElement","debugElement","query","css","nativeElement","click","testData","loginData","toEqual","done","data","errorResponse","error","post","and","returnValue","loginForm","subscribe","response","toContain"],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\r\nimport { FormComponent } from './form.component';\r\nimport { AuthService } from '../../../_services/auth.service';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { of } from 'rxjs';\r\nimport { By } from '@angular/platform-browser';\r\ndescribe('FormComponent', () => {\r\n    let component;\r\n    let fixture;\r\n    let service;\r\n    let httpClientSpy;\r\n    let httpClientSpyGet;\r\n    let httpClientSpyPut;\r\n    beforeEach(async () => {\r\n        // jasmine.DEFAULT_TIMEOUT_INTERVAL = 20000;\r\n        let routerSpy = jasmine.createSpyObj('Router', ['navigate']);\r\n        await TestBed.configureTestingModule({\r\n            declarations: [\r\n                FormComponent\r\n            ],\r\n            imports: [\r\n                RouterTestingModule,\r\n                HttpClientTestingModule,\r\n                FormsModule,\r\n                ReactiveFormsModule\r\n            ]\r\n        })\r\n            .compileComponents();\r\n        httpClientSpy = jasmine.createSpyObj('HttpClient', ['post']);\r\n        httpClientSpyGet = jasmine.createSpyObj('HttpClient', ['get']);\r\n        httpClientSpyPut = jasmine.createSpyObj('HttpClient', ['put']);\r\n        service = new AuthService(routerSpy, httpClientSpy);\r\n    });\r\n    beforeEach(() => {\r\n        fixture = TestBed.createComponent(FormComponent);\r\n        component = fixture.componentInstance;\r\n        fixture.detectChanges();\r\n    });\r\n    it('should create', () => {\r\n        expect(component).toBeTruthy();\r\n    });\r\n    it('Should return invalid form', () => {\r\n        const email = component.validateForm.controls['email'];\r\n        email.setValue('waitress@burgerland.com');\r\n        expect(component.validateForm.invalid).toBeTrue();\r\n    });\r\n    it('Should return valid form', () => {\r\n        const email = component.validateForm.controls['email'];\r\n        const password = component.validateForm.controls['password'];\r\n        email.setValue('hannah@burgerland.com');\r\n        password.setValue('12345');\r\n        expect(component.validateForm.invalid).toBeFalse();\r\n    });\r\n    it('Should update user data', () => {\r\n        const email = component.validateForm.controls['email'];\r\n        const password = component.validateForm.controls['password'];\r\n        email.setValue('waiter@burgerland.com');\r\n        password.setValue('changeme');\r\n        const btnElement = fixture.debugElement.query(By.css('button.btn'));\r\n        btnElement.nativeElement.click();\r\n        const testData = {\r\n            email: 'waiter@burgerland.com',\r\n            password: 'changeme'\r\n        };\r\n        expect(component.loginData).toEqual(testData);\r\n    });\r\n    it('should return an error when the server returns a 404', (done) => {\r\n        const data = {\r\n            email: \"kdmxskn\",\r\n            password: \"\"\r\n        };\r\n        const errorResponse = ({\r\n            error: \"No ingresaste correo o contraseña\"\r\n        });\r\n        httpClientSpy.post.and.returnValue(of(errorResponse));\r\n        service.loginForm(data).subscribe({\r\n            error: response => {\r\n                expect(response).toContain(\"No ingresaste correo o contraseña\"),\r\n                    done();\r\n            },\r\n            //   error: err  => {\r\n            //   expect(err.message).toContain(\"No ingresaste correo o contraseña\");\r\n            //   done();\r\n            // }\r\n        });\r\n    }, 60000);\r\n});\r\n"]},"metadata":{},"sourceType":"module"}