{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\USUARIO\\\\Documents\\\\Laboratoria\\\\LIM016-burger-queen-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { MenuViewComponent } from './menu-view.component';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nconst products = [{\n  name: \"Miranda\",\n  price: 5,\n  image: \"https://firebasestorage.googleapis.com/v0/b/burgerland-63cee.appspot.com/o/capuccino.png?a054920\",\n  type: \"canceled\",\n  _id: \"123id123\",\n  dateEntry: \"2022-03-17T16:31:48.929Z\",\n  createdAt: \"2022-03-17T16:31:48.929Z\",\n  updatedAt: \"2022-03-17T16:31:48.929Z\"\n}, {\n  name: \"Diana\",\n  price: 10,\n  image: \"https://firebasestorage.googleapis.com/v0/b/burgerland-63cee.appspot.com/o/capuccino.png?a054920\",\n  type: \"breakfast\",\n  _id: \"321id321\",\n  dateEntry: \"2022-03-17T17:31:48.929Z\",\n  createdAt: \"2022-03-17T17:31:48.929Z\",\n  updatedAt: \"2022-03-17T17:31:48.929Z\"\n}];\nconst order = {\n  name: \"Diana\",\n  price: 10,\n  image: \"https://firebasestorage.googleapis.com/v0/b/burgerland-63cee.appspot.com/o/capuccino.png?a054920\",\n  type: \"breakfast\",\n  _id: \"321id321\",\n  qty: 1,\n  totalPrice: 9,\n  dateEntry: \"2022-03-17T17:31:48.929Z\",\n  createdAt: \"2022-03-17T17:31:48.929Z\",\n  updatedAt: \"2022-03-17T17:31:48.929Z\"\n};\nconst orders = [{\n  name: \"Diana\",\n  price: 10,\n  image: \"https://firebasestorage.googleapis.com/v0/b/burgerland-63cee.appspot.com/o/capuccino.png?a054920\",\n  type: \"breakfast\",\n  _id: \"321id321\",\n  qty: 1,\n  totalPrice: 9,\n  dateEntry: \"2022-03-17T17:31:48.929Z\",\n  createdAt: \"2022-03-17T17:31:48.929Z\",\n  updatedAt: \"2022-03-17T17:31:48.929Z\"\n}, {\n  name: \"Diana\",\n  price: 10,\n  image: \"https://firebasestorage.googleapis.com/v0/b/burgerland-63cee.appspot.com/o/capuccino.png?a054920\",\n  type: \"breakfast\",\n  _id: \"321id321\",\n  qty: 1,\n  totalPrice: 9,\n  dateEntry: \"2022-03-17T17:31:48.929Z\",\n  createdAt: \"2022-03-17T17:31:48.929Z\",\n  updatedAt: \"2022-03-17T17:31:48.929Z\"\n}];\ndescribe('MenuViewComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [MenuViewComponent],\n      imports: [RouterTestingModule, HttpClientTestingModule]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(MenuViewComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('variables allProducts and categories should has data', () => {\n    let allProducts = component.allProducts;\n    allProducts = products;\n    expect(allProducts.length).toBe(2);\n  }); // it('filterCategories', () => {\n  //   // const e = { target: {dataset: { value: \"\" }}}; \n  //   const mockEvent: Event = <Event><any>{\n  //     target: {\n  //       dataset: {\n  //         value: \"breakfast\"   \n  //       }   \n  //     }\n  //   };\n  //   let result = component.filterCategories(mockEvent);\n  //   expect(result).toEqual(products);\n  // });\n\n  it('v', () => {\n    let arrOrder = component.arrOrder;\n    arrOrder = orders;\n    let result = component.addQty(order);\n    expect(result).toEqual([]);\n  });\n});","map":{"version":3,"sources":["C:/Users/USUARIO/Documents/Laboratoria/LIM016-burger-queen-1/src/app/modules/waiter/menu-view/menu-view.component.spec.ts"],"names":["TestBed","MenuViewComponent","RouterTestingModule","HttpClientTestingModule","products","name","price","image","type","_id","dateEntry","createdAt","updatedAt","order","qty","totalPrice","orders","describe","component","fixture","beforeEach","configureTestingModule","declarations","imports","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","allProducts","length","toBe","arrOrder","result","addQty","toEqual"],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\r\nimport { MenuViewComponent } from './menu-view.component';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\r\nconst products = [\r\n    {\r\n        name: \"Miranda\",\r\n        price: 5,\r\n        image: \"https://firebasestorage.googleapis.com/v0/b/burgerland-63cee.appspot.com/o/capuccino.png?a054920\",\r\n        type: \"canceled\",\r\n        _id: \"123id123\",\r\n        dateEntry: \"2022-03-17T16:31:48.929Z\",\r\n        createdAt: \"2022-03-17T16:31:48.929Z\",\r\n        updatedAt: \"2022-03-17T16:31:48.929Z\",\r\n    },\r\n    {\r\n        name: \"Diana\",\r\n        price: 10,\r\n        image: \"https://firebasestorage.googleapis.com/v0/b/burgerland-63cee.appspot.com/o/capuccino.png?a054920\",\r\n        type: \"breakfast\",\r\n        _id: \"321id321\",\r\n        dateEntry: \"2022-03-17T17:31:48.929Z\",\r\n        createdAt: \"2022-03-17T17:31:48.929Z\",\r\n        updatedAt: \"2022-03-17T17:31:48.929Z\",\r\n    }\r\n];\r\nconst order = {\r\n    name: \"Diana\",\r\n    price: 10,\r\n    image: \"https://firebasestorage.googleapis.com/v0/b/burgerland-63cee.appspot.com/o/capuccino.png?a054920\",\r\n    type: \"breakfast\",\r\n    _id: \"321id321\",\r\n    qty: 1,\r\n    totalPrice: 9,\r\n    dateEntry: \"2022-03-17T17:31:48.929Z\",\r\n    createdAt: \"2022-03-17T17:31:48.929Z\",\r\n    updatedAt: \"2022-03-17T17:31:48.929Z\",\r\n};\r\nconst orders = [\r\n    {\r\n        name: \"Diana\",\r\n        price: 10,\r\n        image: \"https://firebasestorage.googleapis.com/v0/b/burgerland-63cee.appspot.com/o/capuccino.png?a054920\",\r\n        type: \"breakfast\",\r\n        _id: \"321id321\",\r\n        qty: 1,\r\n        totalPrice: 9,\r\n        dateEntry: \"2022-03-17T17:31:48.929Z\",\r\n        createdAt: \"2022-03-17T17:31:48.929Z\",\r\n        updatedAt: \"2022-03-17T17:31:48.929Z\",\r\n    },\r\n    {\r\n        name: \"Diana\",\r\n        price: 10,\r\n        image: \"https://firebasestorage.googleapis.com/v0/b/burgerland-63cee.appspot.com/o/capuccino.png?a054920\",\r\n        type: \"breakfast\",\r\n        _id: \"321id321\",\r\n        qty: 1,\r\n        totalPrice: 9,\r\n        dateEntry: \"2022-03-17T17:31:48.929Z\",\r\n        createdAt: \"2022-03-17T17:31:48.929Z\",\r\n        updatedAt: \"2022-03-17T17:31:48.929Z\",\r\n    }\r\n];\r\ndescribe('MenuViewComponent', () => {\r\n    let component;\r\n    let fixture;\r\n    beforeEach(async () => {\r\n        await TestBed.configureTestingModule({\r\n            declarations: [MenuViewComponent],\r\n            imports: [\r\n                RouterTestingModule,\r\n                HttpClientTestingModule,\r\n            ]\r\n        })\r\n            .compileComponents();\r\n    });\r\n    beforeEach(() => {\r\n        fixture = TestBed.createComponent(MenuViewComponent);\r\n        component = fixture.componentInstance;\r\n        fixture.detectChanges();\r\n    });\r\n    it('should create', () => {\r\n        expect(component).toBeTruthy();\r\n    });\r\n    it('variables allProducts and categories should has data', () => {\r\n        let allProducts = component.allProducts;\r\n        allProducts = products;\r\n        expect(allProducts.length).toBe(2);\r\n    });\r\n    // it('filterCategories', () => {\r\n    //   // const e = { target: {dataset: { value: \"\" }}}; \r\n    //   const mockEvent: Event = <Event><any>{\r\n    //     target: {\r\n    //       dataset: {\r\n    //         value: \"breakfast\"   \r\n    //       }   \r\n    //     }\r\n    //   };\r\n    //   let result = component.filterCategories(mockEvent);\r\n    //   expect(result).toEqual(products);\r\n    // });\r\n    it('v', () => {\r\n        let arrOrder = component.arrOrder;\r\n        arrOrder = orders;\r\n        let result = component.addQty(order);\r\n        expect(result).toEqual([]);\r\n    });\r\n});\r\n"]},"metadata":{},"sourceType":"module"}