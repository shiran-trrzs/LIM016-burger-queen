{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\USUARIO\\\\Documents\\\\Laboratoria\\\\LIM016-burger-queen-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { FormComponent } from './form.component';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { By } from '@angular/platform-browser';\ndescribe('FormComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [FormComponent],\n      imports: [RouterTestingModule, HttpClientTestingModule, FormsModule, ReactiveFormsModule]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(FormComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('Should return invalid form', () => {\n    const email = component.validateForm.controls['email'];\n    email.setValue('waitress@burgerland.com');\n    expect(component.validateForm.invalid).toBeTrue();\n  });\n  it('Should return valid form', () => {\n    const email = component.validateForm.controls['email'];\n    const password = component.validateForm.controls['password'];\n    email.setValue('hannah@burgerland.com');\n    password.setValue('12345');\n    expect(component.validateForm.invalid).toBeFalse();\n  });\n  it('Should update user data', () => {\n    const email = component.validateForm.controls['email'];\n    const password = component.validateForm.controls['password'];\n    email.setValue('waiter@burgerland.com');\n    password.setValue('changeme');\n    const btnElement = fixture.debugElement.query(By.css('button.btn'));\n    btnElement.nativeElement.click();\n    const testData = {\n      email: 'waiter@burgerland.com',\n      password: 'changeme'\n    };\n    expect(component.loginData).toEqual(testData);\n  });\n  it('should return an error when the server returns a 404', done => {\n    const errorResponse = new HttpErrorResponse({\n      error: 'test 404 error',\n      status: 404,\n      statusText: 'Not Found'\n    });\n    httpClientSpy.get.and.returnValue(asyncError(errorResponse));\n    heroService.getHeroes().subscribe({\n      next: heroes => done.fail('expected an error, not heroes'),\n      error: error => {\n        expect(error.message).toContain('test 404 error');\n        done();\n      }\n    });\n  });\n});","map":{"version":3,"sources":["C:/Users/USUARIO/Documents/Laboratoria/LIM016-burger-queen-1/src/app/modules/login/form/form.component.spec.ts"],"names":["TestBed","FormComponent","RouterTestingModule","HttpClientTestingModule","FormsModule","ReactiveFormsModule","By","describe","component","fixture","beforeEach","configureTestingModule","declarations","imports","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","email","validateForm","controls","setValue","invalid","toBeTrue","password","toBeFalse","btnElement","debugElement","query","css","nativeElement","click","testData","loginData","toEqual","done","errorResponse","HttpErrorResponse","error","status","statusText","httpClientSpy","get","and","returnValue","asyncError","heroService","getHeroes","subscribe","next","heroes","fail","message","toContain"],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\r\nimport { FormComponent } from './form.component';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { By } from '@angular/platform-browser';\r\ndescribe('FormComponent', () => {\r\n    let component;\r\n    let fixture;\r\n    beforeEach(async () => {\r\n        await TestBed.configureTestingModule({\r\n            declarations: [\r\n                FormComponent\r\n            ],\r\n            imports: [\r\n                RouterTestingModule,\r\n                HttpClientTestingModule,\r\n                FormsModule,\r\n                ReactiveFormsModule\r\n            ]\r\n        })\r\n            .compileComponents();\r\n    });\r\n    beforeEach(() => {\r\n        fixture = TestBed.createComponent(FormComponent);\r\n        component = fixture.componentInstance;\r\n        fixture.detectChanges();\r\n    });\r\n    it('should create', () => {\r\n        expect(component).toBeTruthy();\r\n    });\r\n    it('Should return invalid form', () => {\r\n        const email = component.validateForm.controls['email'];\r\n        email.setValue('waitress@burgerland.com');\r\n        expect(component.validateForm.invalid).toBeTrue();\r\n    });\r\n    it('Should return valid form', () => {\r\n        const email = component.validateForm.controls['email'];\r\n        const password = component.validateForm.controls['password'];\r\n        email.setValue('hannah@burgerland.com');\r\n        password.setValue('12345');\r\n        expect(component.validateForm.invalid).toBeFalse();\r\n    });\r\n    it('Should update user data', () => {\r\n        const email = component.validateForm.controls['email'];\r\n        const password = component.validateForm.controls['password'];\r\n        email.setValue('waiter@burgerland.com');\r\n        password.setValue('changeme');\r\n        const btnElement = fixture.debugElement.query(By.css('button.btn'));\r\n        btnElement.nativeElement.click();\r\n        const testData = {\r\n            email: 'waiter@burgerland.com',\r\n            password: 'changeme'\r\n        };\r\n        expect(component.loginData).toEqual(testData);\r\n    });\r\n    it('should return an error when the server returns a 404', (done) => {\r\n        const errorResponse = new HttpErrorResponse({\r\n            error: 'test 404 error',\r\n            status: 404, statusText: 'Not Found'\r\n        });\r\n        httpClientSpy.get.and.returnValue(asyncError(errorResponse));\r\n        heroService.getHeroes().subscribe({\r\n            next: heroes => done.fail('expected an error, not heroes'),\r\n            error: error => {\r\n                expect(error.message).toContain('test 404 error');\r\n                done();\r\n            }\r\n        });\r\n    });\r\n});\r\n"]},"metadata":{},"sourceType":"module"}